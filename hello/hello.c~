// #includes

#define DEVICE_NAME	"Hello_world"

// Device structure
struct hello
{

}

// File Operations struct
static struct file_operations fops = {
	.owner   = THIS_MODULE,
  	.read    = hello_read,
  	.write   = hello_write,
  	.open    = hello_open,
	.release = hello_close
};

struct cdev *pcdev;
dev_t dev_num;


static int hello_init(void) {

        int ret = -1;
	
	ret = alloc_chrdev_region(&dev_num, 0, 1, DEVICE_NAME);
	if(ret < 0) {
		printk("Hello : Failed to allocate major number\n");
		return ret;
	}
	maj_num = MAJOR(dev_num);
	printk("Hello : major number is %d\n",maj_num);
	printk("Use mknod for device file\n");

	//step 2
	mcdev = cdev_alloc();
	mcdev->ops = &fops;
	mcdev->owner = THIS_MODULE;
	/* Now we created a cdev, we have to add it to the kernel
	int cdev_add(struct cdev *dev, dev_t num, unsigned int count) */
	ret = cdev_add(mcdev, dev_num, 1);
	if(ret < 0) {
		printk("Helloworld : Unable to add cdev to kernel\n");
	}
	//(4) semaphore
	//sema_init(&virtual_device.sem, 1);

	return 0;
}

static void hello_exit(void) {
	//(5) Unregister in reverse order
	cdev_del(mcdev);
	
	unregister_chrdev_region(dev_num, 1);
	printk("Helloworld : Exit Module\n");
}


//Inform kernel where to start and stop with our module/driver
module_init(hello_init);
module_exit(hello_exit);


